#include "DiffFrontendAction.h"

#include <cppconn/driver.h>
#include <cppconn/prepared_statement.h>
#include <mysql_connection.h>
#include <mysql_driver.h>

#include <fstream>

#include "DiffASTConsumer.h"
#include "DiffConst.h"
#include "DiffUtil.h"

DiffFrontendAction::DiffFrontendAction(const std::vector<int> &Lines, const int DiffIdOption, const std::vector<DiffParser *> *DiffParserVector, sql::ConnectOptionsMap &ConnProperties)
    : Lines(Lines), DiffIdOption(DiffIdOption), DiffParserVector(DiffParserVector), ConnProperties(ConnProperties){};

std::unique_ptr<clang::ASTConsumer> DiffFrontendAction::CreateASTConsumer(clang::CompilerInstance &Compiler, llvm::StringRef InFile) {
  if (InFile.contains(extension::gcov)) {
    CoverageTool = gcov;
  } else if (InFile.contains(extension::llvmcov)) {
    CoverageTool = llvmcov;
  } else {
    throw std::runtime_error("Unable to tell if the file was generated by gcov or llvm-cov");
  }
  return std::make_unique<DiffASTConsumer>(&Compiler.getASTContext(), Lines, CoverageTool, InFile, DiffParserVector, DiffReasonVector);
}

void DiffFrontendAction::EndSourceFileAction() {
  std::string coverageTool;

  if (DiffReasonVector.size() > 0) {
    sql::Driver *driver = get_driver_instance();
    sql::Connection *conn = driver->connect(ConnProperties);
    conn->setSchema("covemidiff");
    std::stringstream sstream;
    sstream << "INSERT INTO `diff_reason` (`diff_id`, `file_type_id`, `line_num`, `reason`, `coverage_tool_id`, `count`) VALUES ";
    for (int i = 0; i < Lines.size() - 1; i++) {
      sstream << "(?, ?, ?, ?, ?, ?), ";
    }
    sstream << "(?, ?, ?, ?, ?, ?)";
    sql::PreparedStatement *prep_stmt = conn->prepareStatement(sstream.str());

    int index = 0;
    for (; index < DiffReasonVector.size(); index++) {
      int base = 6 * index;
      const DiffReason *reason = DiffReasonVector.at(index);
      prep_stmt->setInt(base + 1, DiffIdOption);
      prep_stmt->setInt(base + 2, CoverageTool);
      prep_stmt->setInt(base + 3, reason->getLineNum());
      prep_stmt->setString(base + 4, reason->getDescription());
      if (reason->getParser() != nullptr) {
        auto parser = reason->getParser();
        prep_stmt->setInt(base + 5, parser->getCoverageTool());
        prep_stmt->setInt(base + 6, reason->getCount());
      } else {
        prep_stmt->setInt(base + 5, -1);
        prep_stmt->setInt(base + 6, 0);
      }
    }
    while (index < Lines.size()) {
      int base = 6 * index;
      prep_stmt->setInt(base + 1, DiffIdOption);
      prep_stmt->setInt(base + 2, CoverageTool);
      prep_stmt->setInt(base + 3, Lines.at(index++));
      prep_stmt->setString(base + 4, reason::description::terminated);
      prep_stmt->setInt(base + 5, -1);
      prep_stmt->setInt(base + 6, 0);
    }
    prep_stmt->executeUpdate();
    delete prep_stmt;
    delete conn;
  }
}